{
  "contractName": "ERC721Full",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200126038038062001260833981018060405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b509093508492508391506200010b90507f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b6200013f7f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b620001737f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b8151620001889060099060208501906200024a565b5080516200019e90600a9060208401906200024a565b50620001d37f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001dd810204565b50505050620002ef565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200020d57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028d57805160ff1916838001178555620002bd565b82800160010185558215620002bd579182015b82811115620002bd578251825591602001919060010190620002a0565b50620002cb929150620002cf565b5090565b620002ec91905b80821115620002cb5760008155600101620002d6565b90565b610f6180620002ff6000396000f3fe6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde0314610147578063081812fc146101d1578063095ea7b31461021757806318160ddd1461025257806323b872dd146102795780632f745c59146102bc57806342842e0e146102f55780634f6ccce7146103385780636352211e1461036257806370a082311461038c57806395d89b41146103bf578063a22cb465146103d4578063b88d4fde1461040f578063c87b56dd146104e2578063e985e9c51461050c575b600080fd5b3480156100f657600080fd5b506101336004803603602081101561010d57600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610547565b604080519115158252519081900360200190f35b34801561015357600080fd5b5061015c61057b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019657818101518382015260200161017e565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101dd57600080fd5b506101fb600480360360208110156101f457600080fd5b5035610612565b60408051600160a060020a039092168252519081900360200190f35b34801561022357600080fd5b506102506004803603604081101561023a57600080fd5b50600160a060020a038135169060200135610644565b005b34801561025e57600080fd5b506102676106fa565b60408051918252519081900360200190f35b34801561028557600080fd5b506102506004803603606081101561029c57600080fd5b50600160a060020a03813581169160208101359091169060400135610700565b3480156102c857600080fd5b50610267600480360360408110156102df57600080fd5b50600160a060020a038135169060200135610725565b34801561030157600080fd5b506102506004803603606081101561031857600080fd5b50600160a060020a03813581169160208101359091169060400135610772565b34801561034457600080fd5b506102676004803603602081101561035b57600080fd5b503561078e565b34801561036e57600080fd5b506101fb6004803603602081101561038557600080fd5b50356107c3565b34801561039857600080fd5b50610267600480360360208110156103af57600080fd5b5035600160a060020a03166107ed565b3480156103cb57600080fd5b5061015c610820565b3480156103e057600080fd5b50610250600480360360408110156103f757600080fd5b50600160a060020a0381351690602001351515610881565b34801561041b57600080fd5b506102506004803603608081101561043257600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561046d57600080fd5b82018360208201111561047f57600080fd5b803590602001918460018302840111640100000000831117156104a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610905945050505050565b3480156104ee57600080fd5b5061015c6004803603602081101561050557600080fd5b503561092d565b34801561051857600080fd5b506101336004803603604081101561052f57600080fd5b50600160a060020a03813581169160200135166109e2565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505090505b90565b600061061d82610a10565b151561062857600080fd5b50600090815260026020526040902054600160a060020a031690565b600061064f826107c3565b9050600160a060020a03838116908216141561066a57600080fd5b33600160a060020a0382161480610686575061068681336109e2565b151561069157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b61070a3382610a2d565b151561071557600080fd5b610720838383610a8c565b505050565b6000610730836107ed565b821061073b57600080fd5b600160a060020a038316600090815260056020526040902080548390811061075f57fe5b9060005260206000200154905092915050565b6107208383836020604051908101604052806000815250610905565b60006107986106fa565b82106107a357600080fd5b60078054839081106107b157fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a03168015156107e757600080fd5b92915050565b6000600160a060020a038216151561080457600080fd5b50600160a060020a031660009081526003602052604090205490565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b600160a060020a03821633141561089757600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610910848484610700565b61091c84848484610aab565b151561092757600080fd5b50505050565b606061093882610a10565b151561094357600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109d65780601f106109ab576101008083540402835291602001916109d6565b820191906000526020600020905b8154815290600101906020018083116109b957829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610a39836107c3565b905080600160a060020a031684600160a060020a03161480610a74575083600160a060020a0316610a6984610612565b600160a060020a0316145b80610a845750610a8481856109e2565b949350505050565b610a97838383610c27565b610aa18382610d43565b6107208282610e3a565b6000610abf84600160a060020a0316610e78565b1515610acd57506001610a84565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610b60578181015183820152602001610b48565b50505050905090810190601f168015610b8d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b82600160a060020a0316610c3a826107c3565b600160a060020a031614610c4d57600080fd5b600160a060020a0382161515610c6257600080fd5b610c6b81610e80565b600160a060020a038316600090815260036020526040902054610c9590600163ffffffff610eca16565b600160a060020a038085166000908152600360205260408082209390935590841681522054610ccb90600163ffffffff610edf16565b600160a060020a0380841660008181526003602090815260408083209590955585825260019052838120805473ffffffffffffffffffffffffffffffffffffffff1916831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a038216600090815260056020526040812054610d6d90600163ffffffff610eca16565b600083815260066020526040902054909150808214610e0a57600160a060020a0384166000908152600560205260408120805484908110610daa57fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002083815481101515610dea57fe5b600091825260208083209091019290925591825260069052604090208190555b600160a060020a0384166000908152600560205260409020805490610e33906000198301610ef8565b5050505050565b600160a060020a0390911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000903b1190565b600081815260026020526040902054600160a060020a031615610ec7576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b50565b600082821115610ed957600080fd5b50900390565b600082820183811015610ef157600080fd5b9392505050565b8154818355818111156107205760008381526020902061072091810190830161060f91905b80821115610f315760008155600101610f1d565b509056fea165627a7a723058203605adc53740930a048b810a95bdc784302cf78488aad97b18448417c67c8ccd0029",
  "deployedBytecode": "0x6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde0314610147578063081812fc146101d1578063095ea7b31461021757806318160ddd1461025257806323b872dd146102795780632f745c59146102bc57806342842e0e146102f55780634f6ccce7146103385780636352211e1461036257806370a082311461038c57806395d89b41146103bf578063a22cb465146103d4578063b88d4fde1461040f578063c87b56dd146104e2578063e985e9c51461050c575b600080fd5b3480156100f657600080fd5b506101336004803603602081101561010d57600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610547565b604080519115158252519081900360200190f35b34801561015357600080fd5b5061015c61057b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019657818101518382015260200161017e565b50505050905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101dd57600080fd5b506101fb600480360360208110156101f457600080fd5b5035610612565b60408051600160a060020a039092168252519081900360200190f35b34801561022357600080fd5b506102506004803603604081101561023a57600080fd5b50600160a060020a038135169060200135610644565b005b34801561025e57600080fd5b506102676106fa565b60408051918252519081900360200190f35b34801561028557600080fd5b506102506004803603606081101561029c57600080fd5b50600160a060020a03813581169160208101359091169060400135610700565b3480156102c857600080fd5b50610267600480360360408110156102df57600080fd5b50600160a060020a038135169060200135610725565b34801561030157600080fd5b506102506004803603606081101561031857600080fd5b50600160a060020a03813581169160208101359091169060400135610772565b34801561034457600080fd5b506102676004803603602081101561035b57600080fd5b503561078e565b34801561036e57600080fd5b506101fb6004803603602081101561038557600080fd5b50356107c3565b34801561039857600080fd5b50610267600480360360208110156103af57600080fd5b5035600160a060020a03166107ed565b3480156103cb57600080fd5b5061015c610820565b3480156103e057600080fd5b50610250600480360360408110156103f757600080fd5b50600160a060020a0381351690602001351515610881565b34801561041b57600080fd5b506102506004803603608081101561043257600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561046d57600080fd5b82018360208201111561047f57600080fd5b803590602001918460018302840111640100000000831117156104a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610905945050505050565b3480156104ee57600080fd5b5061015c6004803603602081101561050557600080fd5b503561092d565b34801561051857600080fd5b506101336004803603604081101561052f57600080fd5b50600160a060020a03813581169160200135166109e2565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b820191906000526020600020905b8154815290600101906020018083116105ea57829003601f168201915b505050505090505b90565b600061061d82610a10565b151561062857600080fd5b50600090815260026020526040902054600160a060020a031690565b600061064f826107c3565b9050600160a060020a03838116908216141561066a57600080fd5b33600160a060020a0382161480610686575061068681336109e2565b151561069157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b61070a3382610a2d565b151561071557600080fd5b610720838383610a8c565b505050565b6000610730836107ed565b821061073b57600080fd5b600160a060020a038316600090815260056020526040902080548390811061075f57fe5b9060005260206000200154905092915050565b6107208383836020604051908101604052806000815250610905565b60006107986106fa565b82106107a357600080fd5b60078054839081106107b157fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a03168015156107e757600080fd5b92915050565b6000600160a060020a038216151561080457600080fd5b50600160a060020a031660009081526003602052604090205490565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106075780601f106105dc57610100808354040283529160200191610607565b600160a060020a03821633141561089757600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610910848484610700565b61091c84848484610aab565b151561092757600080fd5b50505050565b606061093882610a10565b151561094357600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156109d65780601f106109ab576101008083540402835291602001916109d6565b820191906000526020600020905b8154815290600101906020018083116109b957829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610a39836107c3565b905080600160a060020a031684600160a060020a03161480610a74575083600160a060020a0316610a6984610612565b600160a060020a0316145b80610a845750610a8481856109e2565b949350505050565b610a97838383610c27565b610aa18382610d43565b6107208282610e3a565b6000610abf84600160a060020a0316610e78565b1515610acd57506001610a84565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610b60578181015183820152602001610b48565b50505050905090810190601f168015610b8d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d6020811015610bd957600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b82600160a060020a0316610c3a826107c3565b600160a060020a031614610c4d57600080fd5b600160a060020a0382161515610c6257600080fd5b610c6b81610e80565b600160a060020a038316600090815260036020526040902054610c9590600163ffffffff610eca16565b600160a060020a038085166000908152600360205260408082209390935590841681522054610ccb90600163ffffffff610edf16565b600160a060020a0380841660008181526003602090815260408083209590955585825260019052838120805473ffffffffffffffffffffffffffffffffffffffff1916831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600160a060020a038216600090815260056020526040812054610d6d90600163ffffffff610eca16565b600083815260066020526040902054909150808214610e0a57600160a060020a0384166000908152600560205260408120805484908110610daa57fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002083815481101515610dea57fe5b600091825260208083209091019290925591825260069052604090208190555b600160a060020a0384166000908152600560205260409020805490610e33906000198301610ef8565b5050505050565b600160a060020a0390911660009081526005602081815260408084208054868652600684529185208290559282526001810183559183529091200155565b6000903b1190565b600081815260026020526040902054600160a060020a031615610ec7576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b50565b600082821115610ed957600080fd5b50900390565b600082820183811015610ef157600080fd5b9392505050565b8154818355818111156107205760008381526020902061072091810190830161060f91905b80821115610f315760008155600101610f1d565b509056fea165627a7a723058203605adc53740930a048b810a95bdc784302cf78488aad97b18448417c67c8ccd0029",
  "sourceMap": "404:227:12:-;;;474:155;8:9:-1;5:2;;;30:1;27;20:12;5:2;474:155:12;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;474:155:12;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;474:155:12;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;474:155:12;;-1:-1:-1;551:4:12;;-1:-1:-1;474:155:12;;-1:-1:-1;640:40:6;;-1:-1:-1;659:20:6;640:18;;;;:40;:::i;:::-;1906::10;1925:20;1906:18;;;;:40;:::i;:::-;1240:51:11;1259:31;1240:18;;;;:51;:::i;:::-;738:12:13;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;760:16:13;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;864:49:13;883:29;864:18;;;;:49;:::i;:::-;666:254;;474:155:12;;404:227;;990:158:6;1065:25;;;;;;1057:34;;;;;;1101:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1101:40:6;1137:4;1101:40;;;990:158::o;404:227:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;404:227:12;;;-1:-1:-1;404:227:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "404:227:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:133:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;778:133:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;778:133:6;-1:-1:-1;;778:133:6;;;;;;;;;;;;;;;;;;;;;1024:83:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1024:83:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1024:83:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3705:151:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3705:151:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3705:151:10;;;;;;;-1:-1:-1;;;;;3705:151:10;;;;;;;;;;;;;;3128:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3128:292:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3128:292:10;;;;;;;;;;;2005:94:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2005:94:11;;;;;;;;;;;;;;;;;;;;5260:180:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5260:180:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5260:180:10;;;;;;;;;;;;;;;;;;1671:182:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1671:182:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1671:182:11;;;;;;;;;6079:132:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6079:132:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6079:132:10;;;;;;;;;;;;;;;;;;2436:148:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2436:148:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2436:148:11;;;2530:177:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2530:177:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2530:177:10;;;2156:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2156:150:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2156:150:10;-1:-1:-1;;;;;2156:150:10;;;1215:87:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1215:87:13;;;;4148:213:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4148:213:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4148:213:10;;;;;;;;;;;6916:211;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6916:211:10;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;6916:211:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6916:211:10;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6916:211:10;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6916:211:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6916:211:10;;-1:-1:-1;6916:211:10;;-1:-1:-1;;;;;6916:211:10;1501:151:13;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1501:151:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1501:151:13;;;4682:145:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4682:145:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4682:145:10;;;;;;;;;;;778:133:6;-1:-1:-1;;871:33:6;848:4;871:33;;;;;;;;;;;;;;778:133::o;1024:83:13:-;1095:5;1088:12;;;;;;;;-1:-1:-1;;1088:12:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1063:13;;1088:12;;1095:5;;1088:12;;1095:5;1088:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1024:83;;:::o;3705:151:10:-;3764:7;3791:16;3799:7;3791;:16::i;:::-;3783:25;;;;;;;;-1:-1:-1;3825:24:10;;;;:15;:24;;;;;;-1:-1:-1;;;;;3825:24:10;;3705:151::o;3128:292::-;3191:13;3207:16;3215:7;3207;:16::i;:::-;3191:32;-1:-1:-1;;;;;;3241:11:10;;;;;;;;3233:20;;;;;;3271:10;-1:-1:-1;;;;;3271:19:10;;;;:58;;;3294:35;3311:5;3318:10;3294:16;:35::i;:::-;3263:67;;;;;;;;3341:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;3341:29:10;-1:-1:-1;;;;;3341:29:10;;;;;;;;;3385:28;;3341:24;;3385:28;;;;;;;3128:292;;;:::o;2005:94:11:-;2075:10;:17;2005:94;:::o;5260:180:10:-;5350:39;5369:10;5381:7;5350:18;:39::i;:::-;5342:48;;;;;;;;5401:32;5415:4;5421:2;5425:7;5401:13;:32::i;:::-;5260:180;;;:::o;1671:182:11:-;1751:7;1786:16;1796:5;1786:9;:16::i;:::-;1778:24;;1770:33;;;;;;-1:-1:-1;;;;;1820:19:11;;;;;;:12;:19;;;;;:26;;1840:5;;1820:26;;;;;;;;;;;;;;1813:33;;1671:182;;;;:::o;6079:132:10:-;6165:39;6182:4;6188:2;6192:7;6165:39;;;;;;;;;;;;;:16;:39::i;2436:148:11:-;2494:7;2529:13;:11;:13::i;:::-;2521:21;;2513:30;;;;;;2560:10;:17;;2571:5;;2560:17;;;;;;;;;;;;;;2553:24;;2436:148;;;:::o;2530:177:10:-;2585:7;2620:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2620:20:10;2658:19;;;2650:28;;;;;;2695:5;2530:177;-1:-1:-1;;2530:177:10:o;2156:150::-;2211:7;-1:-1:-1;;;;;2238:19:10;;;;2230:28;;;;;;-1:-1:-1;;;;;;2275:24:10;;;;;:17;:24;;;;;;;2156:150::o;1215:87:13:-;1288:7;1281:14;;;;;;;;-1:-1:-1;;1281:14:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1256:13;;1281:14;;1288:7;;1281:14;;1288:7;1281:14;;;;;;;;;;;;;;;;;;;;;;;;4148:213:10;-1:-1:-1;;;;;4227:16:10;;4233:10;4227:16;;4219:25;;;;;;4273:10;4254:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4254:34:10;;;;;;;;;;;;:45;;-1:-1:-1;;4254:45:10;;;;;;;;;;4314:40;;;;;;;4254:34;;4273:10;4314:40;;;;;;;;;;;4148:213;;:::o;6916:211::-;7022:31;7035:4;7041:2;7045:7;7022:12;:31::i;:::-;7071:48;7094:4;7100:2;7104:7;7113:5;7071:22;:48::i;:::-;7063:57;;;;;;;;6916:211;;;;:::o;1501:151:13:-;1559:13;1592:16;1600:7;1592;:16::i;:::-;1584:25;;;;;;;;1626:19;;;;:10;:19;;;;;;;;;1619:26;;;;;;-1:-1:-1;;1619:26:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1626:19;;1619:26;;1626:19;1619:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1501:151;;;:::o;4682:145:10:-;-1:-1:-1;;;;;4785:25:10;;;4762:4;4785:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4682:145::o;7316:152::-;7373:4;7405:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7405:20:10;7442:19;;;7316:152::o;7831:246::-;7916:4;7932:13;7948:16;7956:7;7948;:16::i;:::-;7932:32;;7993:5;-1:-1:-1;;;;;7982:16:10;:7;-1:-1:-1;;;;;7982:16:10;;:51;;;;8026:7;-1:-1:-1;;;;;8002:31:10;:20;8014:7;8002:11;:20::i;:::-;-1:-1:-1;;;;;8002:31:10;;7982:51;:87;;;;8037:32;8054:5;8061:7;8037:16;:32::i;:::-;7974:96;7831:246;-1:-1:-1;;;;7831:246:10:o;2958:239:11:-;3043:38;3063:4;3069:2;3073:7;3043:19;:38::i;:::-;3092:47;3125:4;3131:7;3092:32;:47::i;:::-;3150:40;3178:2;3182:7;3150:27;:40::i;10744:347:10:-;10865:4;10890:15;:2;-1:-1:-1;;;;;10890:13:10;;:15::i;:::-;10889:16;10885:58;;;-1:-1:-1;10928:4:10;10921:11;;10885:58;10969:70;;;;;11006:10;10969:70;;;;;;-1:-1:-1;;;;;10969:70:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;10953:13;;10969:36;;;;;;11006:10;;11018:4;;11024:7;;11033:5;;10969:70;;;;;;;;;;;10953:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10969:70:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10969:70:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10969:70:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10969:70:10;-1:-1:-1;;11057:26:10;11067:16;11057:26;;-1:-1:-1;;10744:347:10;;;;;;:::o;9819:402::-;9932:4;-1:-1:-1;;;;;9912:24:10;:16;9920:7;9912;:16::i;:::-;-1:-1:-1;;;;;9912:24:10;;9904:33;;;;;;-1:-1:-1;;;;;9955:16:10;;;;9947:25;;;;;;9983:23;9998:7;9983:14;:23::i;:::-;-1:-1:-1;;;;;10043:23:10;;;;;;:17;:23;;;;;;:30;;10071:1;10043:30;:27;:30;:::i;:::-;-1:-1:-1;;;;;10017:23:10;;;;;;;:17;:23;;;;;;:56;;;;10107:21;;;;;;;:28;;10133:1;10107:28;:25;:28;:::i;:::-;-1:-1:-1;;;;;10083:21:10;;;;;;;:17;:21;;;;;;;;:52;;;;10146:20;;;:11;:20;;;;;:25;;-1:-1:-1;;10146:25:10;;;;;10187:27;;10158:7;;10083:21;;10187:27;;;;;;9819:402;;;:::o;6060:1128:11:-;-1:-1:-1;;;;;6347:18:11;;6322:22;6347:18;;;:12;:18;;;;;:25;:32;;6377:1;6347:32;:29;:32;:::i;:::-;6389:18;6410:26;;;:17;:26;;;;;;6322:57;;-1:-1:-1;6540:28:11;;;6536:323;;-1:-1:-1;;;;;6606:18:11;;6584:19;6606:18;;;:12;:18;;;;;:34;;6625:14;;6606:34;;;;;;;;;;;;;;6584:56;;6688:11;6655:12;:18;6668:4;-1:-1:-1;;;;;6655:18:11;-1:-1:-1;;;;;6655:18:11;;;;;;;;;;;;6674:10;6655:30;;;;;;;;;;;;;;;;;;;;;:44;;;;6771:30;;;:17;:30;;;;;:43;;;6536:323;-1:-1:-1;;;;;6945:18:11;;;;;;:12;:18;;;;;:27;;;;;-1:-1:-1;;6945:27:11;;;:::i;:::-;;6060:1128;;;;:::o;4906:183::-;-1:-1:-1;;;;;5019:16:11;;;;;;;:12;:16;;;;;;;;:23;;4990:26;;;:17;:26;;;;;:52;;;5052:16;;;39:1:-1;23:18;;45:23;;5052:30:11;;;;;;;;4906:183::o;463:616:18:-;523:4;1026:20;;1064:8;;463:616::o;11252:171:10:-;11351:1;11315:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11315:24:10;:38;11311:106;;11404:1;11369:24;;;:15;:24;;;;;:37;;-1:-1:-1;;11369:37:10;;;11311:106;11252:171;:::o;1205:145:8:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:8;;;1205:145::o;1431:::-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:8:o;404:227:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC721.sol\";\nimport \"./ERC721Enumerable.sol\";\nimport \"./ERC721Metadata.sol\";\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n}\n",
  "sourcePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol",
  "ast": {
    "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        3896
      ]
    },
    "id": 3897,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3874,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:12"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 3875,
        "nodeType": "ImportDirective",
        "scope": 3897,
        "sourceUnit": 3538,
        "src": "25:22:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 3876,
        "nodeType": "ImportDirective",
        "scope": 3897,
        "sourceUnit": 3873,
        "src": "48:32:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 3877,
        "nodeType": "ImportDirective",
        "scope": 3897,
        "sourceUnit": 4024,
        "src": "81:30:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3878,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3537,
              "src": "427:6:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3537",
                "typeString": "contract ERC721"
              }
            },
            "id": 3879,
            "nodeType": "InheritanceSpecifier",
            "src": "427:6:12"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3880,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3872,
              "src": "435:16:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$3872",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 3881,
            "nodeType": "InheritanceSpecifier",
            "src": "435:16:12"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3882,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4023,
              "src": "453:14:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$4023",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 3883,
            "nodeType": "InheritanceSpecifier",
            "src": "453:14:12"
          }
        ],
        "contractDependencies": [
          2731,
          2741,
          3537,
          3872,
          4023,
          4126,
          4153,
          4176
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "fullyImplemented": true,
        "id": 3896,
        "linearizedBaseContracts": [
          3896,
          4023,
          4176,
          3872,
          4153,
          3537,
          4126,
          2731,
          2741
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3894,
              "nodeType": "Block",
              "src": "565:64:12",
              "statements": []
            },
            "documentation": null,
            "id": 3895,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3890,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3885,
                    "src": "551:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3891,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3887,
                    "src": "557:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 3892,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3889,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4023,
                  "src": "536:14:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$4023_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "536:28:12"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3888,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3885,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "487:18:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3884,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "487:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3887,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "507:20:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3886,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "507:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "486:42:12"
            },
            "returnParameters": {
              "id": 3893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "565:0:12"
            },
            "scope": 3896,
            "src": "474:155:12",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3897,
        "src": "404:227:12"
      }
    ],
    "src": "0:632:12"
  },
  "legacyAST": {
    "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        3896
      ]
    },
    "id": 3897,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3874,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:12"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 3875,
        "nodeType": "ImportDirective",
        "scope": 3897,
        "sourceUnit": 3538,
        "src": "25:22:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 3876,
        "nodeType": "ImportDirective",
        "scope": 3897,
        "sourceUnit": 3873,
        "src": "48:32:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 3877,
        "nodeType": "ImportDirective",
        "scope": 3897,
        "sourceUnit": 4024,
        "src": "81:30:12",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3878,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3537,
              "src": "427:6:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$3537",
                "typeString": "contract ERC721"
              }
            },
            "id": 3879,
            "nodeType": "InheritanceSpecifier",
            "src": "427:6:12"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3880,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3872,
              "src": "435:16:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$3872",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 3881,
            "nodeType": "InheritanceSpecifier",
            "src": "435:16:12"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3882,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4023,
              "src": "453:14:12",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$4023",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 3883,
            "nodeType": "InheritanceSpecifier",
            "src": "453:14:12"
          }
        ],
        "contractDependencies": [
          2731,
          2741,
          3537,
          3872,
          4023,
          4126,
          4153,
          4176
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "fullyImplemented": true,
        "id": 3896,
        "linearizedBaseContracts": [
          3896,
          4023,
          4176,
          3872,
          4153,
          3537,
          4126,
          2731,
          2741
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3894,
              "nodeType": "Block",
              "src": "565:64:12",
              "statements": []
            },
            "documentation": null,
            "id": 3895,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 3890,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3885,
                    "src": "551:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 3891,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3887,
                    "src": "557:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 3892,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3889,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4023,
                  "src": "536:14:12",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$4023_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "536:28:12"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3888,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3885,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "487:18:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3884,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "487:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3887,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 3895,
                  "src": "507:20:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3886,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "507:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "486:42:12"
            },
            "returnParameters": {
              "id": 3893,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "565:0:12"
            },
            "scope": 3896,
            "src": "474:155:12",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 3897,
        "src": "404:227:12"
      }
    ],
    "src": "0:632:12"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.0",
  "updatedAt": "2019-02-18T03:20:29.999Z",
  "devdoc": {
    "details": "see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "Full ERC721 Token This implementation includes all the required and some optional functionality of the ERC721 standard Moreover, it includes approve all functionality using operator terminology"
  },
  "userdoc": {
    "methods": {}
  }
}